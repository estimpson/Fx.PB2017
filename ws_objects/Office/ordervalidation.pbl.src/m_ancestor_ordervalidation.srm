$PBExportHeader$m_ancestor_ordervalidation.srm
forward
global type m_ancestor_ordervalidation from menu
end type
type m_file from menu within m_ancestor_ordervalidation
end type
type m_exit from menu within m_file
end type
type m_file from menu within m_ancestor_ordervalidation
m_exit m_exit
end type
type m_edit from menu within m_ancestor_ordervalidation
end type
type m_previous from menu within m_edit
end type
type m_order from menu within m_previous
end type
type m_discrepency from menu within m_previous
end type
type m_previous from menu within m_edit
m_order m_order
m_discrepency m_discrepency
end type
type m_next from menu within m_edit
end type
type m_order1 from menu within m_next
end type
type m_discrepency1 from menu within m_next
end type
type m_next from menu within m_edit
m_order1 m_order1
m_discrepency1 m_discrepency1
end type
type m_edit from menu within m_ancestor_ordervalidation
m_previous m_previous
m_next m_next
end type
type m_view from menu within m_ancestor_ordervalidation
end type
type m_normal from menu within m_view
end type
type m_list from menu within m_view
end type
type m_view from menu within m_ancestor_ordervalidation
m_normal m_normal
m_list m_list
end type
type m_window from menu within m_ancestor_ordervalidation
end type
type m_tile from menu within m_window
end type
type m_layer from menu within m_window
end type
type m_cascade from menu within m_window
end type
type m__8 from menu within m_window
end type
type m_arrangeicons from menu within m_window
end type
type m_window from menu within m_ancestor_ordervalidation
m_tile m_tile
m_layer m_layer
m_cascade m_cascade
m__8 m__8
m_arrangeicons m_arrangeicons
end type
type m_help from menu within m_ancestor_ordervalidation
end type
type m__9 from menu within m_help
end type
type m_about from menu within m_help
end type
type m_help from menu within m_ancestor_ordervalidation
m__9 m__9
m_about m_about
end type
end forward

global type m_ancestor_ordervalidation from menu
m_file m_file
m_edit m_edit
m_view m_view
m_window m_window
m_help m_help
end type
global m_ancestor_ordervalidation m_ancestor_ordervalidation

type variables

end variables

forward prototypes
public subroutine mf_click (string a_s_event)
end prototypes

public subroutine mf_click (string a_s_event);IF IsValid ( ParentWindow.ParentWindow ( ) ) THEN
	ParentWindow.TriggerEvent ( a_s_event )
	ParentWindow.ParentWindow ( ).TriggerEvent ( a_s_event )
ELSE
	ParentWindow.TriggerEvent ( a_s_event )
END IF
end subroutine

on m_ancestor_ordervalidation.create
m_ancestor_ordervalidation=this
this.m_file=create m_file
this.m_edit=create m_edit
this.m_view=create m_view
this.m_window=create m_window
this.m_help=create m_help
this.Item[]={this.m_file, &
this.m_edit, &
this.m_view, &
this.m_window, &
this.m_help}
end on

on m_ancestor_ordervalidation.destroy
destroy(this.m_file)
destroy(this.m_edit)
destroy(this.m_view)
destroy(this.m_window)
destroy(this.m_help)
end on

type m_file from menu within m_ancestor_ordervalidation
m_exit m_exit
end type

on m_file.create
this.Text="&File"
this.m_exit=create m_exit
this.Item[]={this.m_exit}
end on

on m_file.destroy
destroy(this.m_exit)
end on

type m_exit from menu within m_file
end type

event clicked;mf_click ( 'ue_exit' )
end event

on m_exit.create
this.Text="E&xit~tAlt+X"
this.Microhelp="Exit..."
this.ToolBarItemName="Exit!"
this.ToolBarItemText="Exit"
this.ToolBarItemSpace=1
this.Shortcut=600
end on

type m_edit from menu within m_ancestor_ordervalidation
m_previous m_previous
m_next m_next
end type

on m_edit.create
this.Text="&Edit"
this.ToolBarItemSpace=1
this.m_previous=create m_previous
this.m_next=create m_next
this.Item[]={this.m_previous, &
this.m_next}
end on

on m_edit.destroy
destroy(this.m_previous)
destroy(this.m_next)
end on

type m_previous from menu within m_edit
m_order m_order
m_discrepency m_discrepency
end type

on m_previous.create
this.Text="&Previous"
this.ToolBarItemOrder=1
this.ToolBarItemSpace=5
this.m_order=create m_order
this.m_discrepency=create m_discrepency
this.Item[]={this.m_order, &
this.m_discrepency}
end on

on m_previous.destroy
destroy(this.m_order)
destroy(this.m_discrepency)
end on

type m_order from menu within m_previous
end type

on m_order.create
this.Text="&Order"
this.ToolBarItemName="Prior!"
this.ToolBarItemText="Previous Order"
this.ToolBarItemOrder=1
this.ToolBarItemSpace=5
end on

event clicked;mf_click ( 'ue_previousorder' )
end event

type m_discrepency from menu within m_previous
end type

on m_discrepency.create
this.Text="&Discrepency"
this.ToolBarItemName="Custom036!"
this.ToolBarItemText="Previous Discrepency"
this.ToolBarItemOrder=2
this.ToolBarItemSpace=5
end on

event clicked;mf_click ( 'ue_previousdiscrepency' )
end event

type m_next from menu within m_edit
m_order1 m_order1
m_discrepency1 m_discrepency1
end type

on m_next.create
this.Text="&Next"
this.ToolBarItemOrder=2
this.m_order1=create m_order1
this.m_discrepency1=create m_discrepency1
this.Item[]={this.m_order1, &
this.m_discrepency1}
end on

on m_next.destroy
destroy(this.m_order1)
destroy(this.m_discrepency1)
end on

type m_order1 from menu within m_next
end type

on m_order1.create
this.Text="&Order"
this.ToolBarItemName="Next!"
this.ToolBarItemText="Next Order"
this.ToolBarItemOrder=1
end on

event clicked;mf_click ( 'ue_nextorder' )
end event

type m_discrepency1 from menu within m_next
end type

on m_discrepency1.create
this.Text="&Discrepency"
this.ToolBarItemName="Custom035!"
this.ToolBarItemText="Next Discrepency"
this.ToolBarItemOrder=2
end on

event clicked;mf_click ( 'ue_nextdiscrepency' )
end event

on m_discrepency1.destroy
end on

type m_view from menu within m_ancestor_ordervalidation
m_normal m_normal
m_list m_list
end type

on m_view.create
this.Text="&View"
this.ToolBarItemVisible=false
this.m_normal=create m_normal
this.m_list=create m_list
this.Item[]={this.m_normal, &
this.m_list}
end on

on m_view.destroy
destroy(this.m_normal)
destroy(this.m_list)
end on

type m_normal from menu within m_view
end type

event clicked;mf_click ( 'ue_viewnormal' )
end event

on m_normal.create
this.Text="&Normal"
this.ToolBarItemName="SelectTable5!"
this.ToolBarItemText="One Order"
this.Visible=false
this.ToolBarItemVisible=false
this.ToolBarItemOrder=4
this.ToolBarItemSpace=3
end on

type m_list from menu within m_view
end type

event clicked;mf_click ( 'ue_viewlist' )
end event

on m_list.create
this.Text="&List"
this.ToolBarItemName="ArrangeTables!"
this.ToolBarItemText="All Releases"
this.Visible=false
this.ToolBarItemVisible=false
this.ToolBarItemOrder=5
end on

type m_window from menu within m_ancestor_ordervalidation
m_tile m_tile
m_layer m_layer
m_cascade m_cascade
m__8 m__8
m_arrangeicons m_arrangeicons
end type

on m_window.create
this.Text="&Window"
this.m_tile=create m_tile
this.m_layer=create m_layer
this.m_cascade=create m_cascade
this.m__8=create m__8
this.m_arrangeicons=create m_arrangeicons
this.Item[]={this.m_tile, &
this.m_layer, &
this.m_cascade, &
this.m__8, &
this.m_arrangeicons}
end on

on m_window.destroy
destroy(this.m_tile)
destroy(this.m_layer)
destroy(this.m_cascade)
destroy(this.m__8)
destroy(this.m_arrangeicons)
end on

type m_tile from menu within m_window
end type

event clicked;IF IsValid ( ParentWindow.GetParent ( ) ) THEN
	ParentWindow.ParentWindow ( ).ArrangeSheets ( Tile! )
ELSE
	ParentWindow.ArrangeSheets ( Tile! )
END IF
end event

on m_tile.create
this.Text="&Tile"
end on

type m_layer from menu within m_window
end type

event clicked;IF IsValid ( ParentWindow.GetParent ( ) ) THEN
	ParentWindow.ParentWindow ( ).ArrangeSheets ( Layer! )
ELSE
	ParentWindow.ArrangeSheets ( Layer! )
END IF
end event

on m_layer.create
this.Text="&Layer"
end on

type m_cascade from menu within m_window
end type

event clicked;IF IsValid ( ParentWindow.GetParent ( ) ) THEN
	ParentWindow.ParentWindow ( ).ArrangeSheets ( Cascade! )
ELSE
	ParentWindow.ArrangeSheets ( Cascade! )
END IF
end event

on m_cascade.create
this.Text="&Cascade"
end on

type m__8 from menu within m_window
end type

on m__8.create
this.Text="-"
end on

type m_arrangeicons from menu within m_window
end type

event clicked;IF IsValid ( ParentWindow.GetParent ( ) ) THEN
	ParentWindow.ParentWindow ( ).ArrangeSheets ( Icons! )
ELSE
	ParentWindow.ArrangeSheets ( Icons! )
END IF
end event

on m_arrangeicons.create
this.Text="Arrange &Icons"
end on

type m_help from menu within m_ancestor_ordervalidation
m__9 m__9
m_about m_about
end type

on m_help.create
this.Text="&Help"
this.m__9=create m__9
this.m_about=create m_about
this.Item[]={this.m__9, &
this.m_about}
end on

on m_help.destroy
destroy(this.m__9)
destroy(this.m_about)
end on

type m__9 from menu within m_help
end type

on m__9.create
this.Text="-"
this.Visible=false
end on

type m_about from menu within m_help
end type

event clicked;OpenWithParm ( w_title_popup, "P,S & P" )
end event

on m_about.create
this.Text="&About"
this.MenuItemType=MenuItemTypeAbout!
end on

