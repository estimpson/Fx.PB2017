$PBExportHeader$m_part_char.srm
$PBExportComments$mad1
forward
global type m_part_char from menu
end type
type m_file from menu within m_part_char
end type
type m_save from menu within m_file
end type
type m_- from menu within m_file
end type
type m_close from menu within m_file
end type
type m_file from menu within m_part_char
m_save m_save
m_- m_-
m_close m_close
end type
type m_edit from menu within m_part_char
end type
type m_window from menu within m_part_char
end type
type m_tile from menu within m_window
end type
type m_layer from menu within m_window
end type
type m_cascade from menu within m_window
end type
type m_line31 from menu within m_window
end type
type m_arrangeicons from menu within m_window
end type
type m_window from menu within m_part_char
m_tile m_tile
m_layer m_layer
m_cascade m_cascade
m_line31 m_line31
m_arrangeicons m_arrangeicons
end type
type m_help from menu within m_part_char
end type
global type m_part_char from menu
m_file m_file
m_edit m_edit
m_window m_window
m_help m_help
end type
end forward

global type m_part_char from menu
m_file m_file
m_edit m_edit
m_window m_window
m_help m_help
end type
global m_part_char m_part_char

type variables
String szPart
end variables

forward prototypes
public subroutine wf_reset ()
end prototypes

public subroutine wf_reset ();If m_part_master.Text <> "Units of Measure" Then

   Close ( w_conversion_part_link )

End If

If m_part_master.Text <> "Characteristics" Then

   Close ( w_part_char )

End If

If m_part_master.Text <> "Notes" Then

   Close ( w_notes )

End If



end subroutine

on m_part_char.create
m_part_char=this
call super::create
this.m_file=create m_file
this.m_edit=create m_edit
this.m_window=create m_window
this.m_help=create m_help
this.Item[UpperBound(this.Item)+1]=this.m_file
this.Item[UpperBound(this.Item)+1]=this.m_edit
this.Item[UpperBound(this.Item)+1]=this.m_window
this.Item[UpperBound(this.Item)+1]=this.m_help
end on

on m_part_char.destroy
call super::destroy
destroy(this.m_file)
destroy(this.m_edit)
destroy(this.m_window)
destroy(this.m_help)
end on

type m_file from menu within m_part_char
m_save m_save
m_- m_-
m_close m_close
end type

on m_file.create
call super::create
this.text = "&File"
this.m_save=create m_save
this.m_-=create m_-
this.m_close=create m_close
this.Item[UpperBound(this.Item)+1]=this.m_save
this.Item[UpperBound(this.Item)+1]=this.m_-
this.Item[UpperBound(this.Item)+1]=this.m_close
end on

on m_file.destroy
call super::destroy
destroy(this.m_save)
destroy(this.m_-)
destroy(this.m_close)
end on

type m_save from menu within m_file
end type

event clicked;gnv_App.of_GetFrame().GetActiveSheet().TriggerEvent ( 'ue_save' )
end event

on m_save.create
call super::create
this.text = "&Save~tCtrl+S"
this.shortcut = 339
this.microhelp = "Save part characteristics"
this.toolbaritemname = "Update!"
this.toolbaritemtext = "Save"
this.toolbaritemorder = 8
end on

on m_save.destroy
call super::destroy
end on

type m_- from menu within m_file
end type

on m_-.create
call super::create
this.text = "-"
end on

on m_-.destroy
call super::destroy
end on

type m_close from menu within m_file
end type

event clicked;gnv_App.of_GetFrame().GetActiveSheet().TriggerEvent ( 'ue_exit' )
end event

on m_close.create
call super::create
this.text = "Close"
this.toolbaritemname = "Close!"
this.toolbaritemtext = "Close"
this.toolbaritemorder = 9999
this.toolbaritemspace = 1
end on

on m_close.destroy
call super::destroy
end on

type m_edit from menu within m_part_char
end type

on m_edit.create
call super::create
this.text = "&Edit"
end on

on m_edit.destroy
call super::destroy
end on

type m_window from menu within m_part_char
m_tile m_tile
m_layer m_layer
m_cascade m_cascade
m_line31 m_line31
m_arrangeicons m_arrangeicons
end type

on m_window.create
call super::create
this.text = "&Window"
this.m_tile=create m_tile
this.m_layer=create m_layer
this.m_cascade=create m_cascade
this.m_line31=create m_line31
this.m_arrangeicons=create m_arrangeicons
this.Item[UpperBound(this.Item)+1]=this.m_tile
this.Item[UpperBound(this.Item)+1]=this.m_layer
this.Item[UpperBound(this.Item)+1]=this.m_cascade
this.Item[UpperBound(this.Item)+1]=this.m_line31
this.Item[UpperBound(this.Item)+1]=this.m_arrangeicons
end on

on m_window.destroy
call super::destroy
destroy(this.m_tile)
destroy(this.m_layer)
destroy(this.m_cascade)
destroy(this.m_line31)
destroy(this.m_arrangeicons)
end on

type m_tile from menu within m_window
end type

on clicked;gnv_App.of_GetFrame().ArrangeSheets ( Tile! )

end on

on m_tile.create
call super::create
this.text = "&Tile"
end on

on m_tile.destroy
call super::destroy
end on

type m_layer from menu within m_window
end type

on clicked;gnv_App.of_GetFrame().ArrangeSheets ( Layer! )
end on

on m_layer.create
call super::create
this.text = "&Layer"
end on

on m_layer.destroy
call super::destroy
end on

type m_cascade from menu within m_window
end type

on clicked;gnv_App.of_GetFrame().ArrangeSheets ( Cascade! )
end on

on m_cascade.create
call super::create
this.text = "&Cascade"
end on

on m_cascade.destroy
call super::destroy
end on

type m_line31 from menu within m_window
end type

on m_line31.create
call super::create
this.text = "-"
end on

on m_line31.destroy
call super::destroy
end on

type m_arrangeicons from menu within m_window
end type

on clicked;gnv_App.of_GetFrame().ArrangeSheets ( Icons! )
end on

on m_arrangeicons.create
call super::create
this.text = "Arrange &Icons"
end on

on m_arrangeicons.destroy
call super::destroy
end on

type m_help from menu within m_part_char
end type

on m_help.create
call super::create
this.text = "&Help"
end on

on m_help.destroy
call super::destroy
end on

