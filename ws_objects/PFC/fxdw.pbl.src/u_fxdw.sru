$PBExportHeader$u_fxdw.sru
forward
global type u_fxdw from u_dw
end type
end forward

global type u_fxdw from u_dw
boolean border = false
borderstyle borderstyle = stylebox!
boolean asyncactiverow = true
event fx_definitionchanged ( string newdataobject )
event dwmousemove pbm_dwnmousemove
event pfc_setcolumnsort ( string columnname,  string sortorder )
event pfc_setcolumnfilter ( string columnname,  string filterverb,  string filtervalue )
event type integer pfc_new ( )
event dataobjectchanged ( )
event type integer setcolumncomments ( boolean switchcolumncomments )
event ue_columncommentadded ( )
end type
global u_fxdw u_fxdw

type variables

public:
n_cst_virtual_controller Controller

//	Measurements.
privatewrite string DWUnits
privatewrite decimal UnitXFactor, UnitYFactor
privatewrite long HeaderHeight
privatewrite long DetailHeight
privatewrite long SummaryHeight
privatewrite long FooterHeight
privatewrite long GroupHeaderHeights[]
privatewrite long GroupTrailerHeights[]
privatewrite long HeaderWidth
privatewrite long DetailWidth
privatewrite long SummaryWidth
privatewrite long FooterWidth
privatewrite long GroupHeaderWidth[]
privatewrite long GroupTrailerWidth[]
privatewrite long DWMaximumWidth

//	Autogeneration.
protected boolean AutoGenerateDW
boolean DropDownSearch = true

//	Form or grid layout.
constant int FORMLAYOUT = 0
constant int GRIDLAYOUT = 1
int Layout = GRIDLAYOUT

//	Grid behavior.
boolean RowIndicator = false
constant int NOSELECTION = 0
constant int SINGLEROW = 1
constant int MULTIROW = 2
int RowSelection = MULTIROW

protected privatewrite boolean NoneSelected
protected privatewrite boolean SingleSelected

//	PowerFilter behavior
boolean ShowPowerFilter = true

//	ColumnComment behavior
boolean ShowColumnComments = true
n_cst_columncomments ColumnComments

//	Update behavior.
boolean AutoUpdate = false

//	FXDW datasource.
public string TableAlias, TableName, ColumnGroupList

//	ToolTip handling:
public string PriorDWOName = "!"
u_tooltip ToolTip
int AnchorX, AnchorY
window ParentWO

//	Resize behavior.
boolean Autoscroll = false


end variables

forward prototypes
public function integer generatedw ()
public subroutine setchange (long row, integer columnnumber)
public function integer selectrow (long row, boolean flag)
public function integer refresh ()
public function integer setcolumncomments (boolean switchcolumncomments)
public subroutine setcolumncomment (long row, integer columnnumber)
public function integer showtooltip (string dwoname, integer xpos, integer ypos)
public function integer showcolumncomments (string dwoname, long row)
public function integer measuredw ()
public function long getsinglerowheight ()
end prototypes

event fx_definitionchanged(string newdataobject);
//	Restart the sort service.
if	IsValid(PowerFilter) then
	SetPowerFilter(false)
	SetPowerFilter(true)
	if	newDataObject > "" then
		PowerFilter.of_SetDW(this)
		PowerFilter.post Show()
	end if
end if

//	Turn on the sort service
if	IsValid(inv_sort) then
	of_SetSort (false)
	of_SetSort (true)
	if	newDataObject > "" then
		inv_sort.of_SetStyle(inv_sort.DRAGDROP)
		inv_Sort.SetColumnHeaderExt (true)
	end if
end if

//	Turn on the filter service
if	newDataObject > "" then
	of_SetFilter (true)
	inv_filter.of_SetStyle(inv_filter.EXTENDED)
end if

//	Search dropdowns.
of_SetDropDownSearch(true)
inv_DropDownSearch.of_Register()

//	Turn on the calendar for editable dates.
of_SetDropDownCalendar(true)
iuo_Calendar.of_Register(iuo_Calendar.DDLB)

//	Clear prior dwo for tooltip.
PriorDWOName = "!"

//	Ensure visibility.
this.Visible = this.Visible

end event

event dwmousemove;
long rowAtPointer
string	dwoName
string dwoNameParts []
dwoNameParts = SplitString(GetObjectAtPointer(), "~t")
if	UpperBound(dwoNameParts) < 2 then return NO_ACTION
dwoName = dwoNameParts[1]
rowAtPointer = long(dwoNameParts[2])

ShowColumnComments(dwoName, rowAtPointer)
ShowToolTip(dwoName, xpos, ypos)
PriorDWOName = dwoName

end event

event pfc_setcolumnsort(string columnname, string sortorder);
if	IsValid(inv_Sort) then
	inv_Sort.event pfc_SetColumnSort(columnName, sortOrder)
end if

end event

event pfc_setcolumnfilter(string columnname, string filterverb, string filtervalue);
if	IsValid(inv_Filter) then
	inv_Filter.event pfc_SetColumnFilter(columnName, filterVerb, filterValue)
end if

end event

event type integer pfc_new();
if	InsertRow(0) >= 0 then
	return SUCCESS
else
	return FAILURE
end if

end event

event DataObjectChanged();
//	Place code here that should fire every time a dataobject change occurs.

end event

event type integer setcolumncomments(boolean switchcolumncomments);
//	Check arguments
if	IsNull(switchColumnComments) then
	return FAILURE
end if

if	switchColumnComments then
	if	isnull(ColumnComments) or not IsValid(ColumnComments) then
		ColumnComments = create n_cst_columncomments
		
		window ownerWindow
		of_GetParentWindow(ref ownerWindow)
		
		return ColumnComments.SetRequestor(this, ownerWindow)
	end if
	return NO_ACTION
end if

if	IsValid(ColumnComments) then
	destroy PowerFilter
end if

return SUCCESS

end event

event ue_columncommentadded();
post SetcolumnComment(GetRow(), GetColumn())

end event

public function integer generatedw ();
//	Build datawindow syntax.
string dwSyntax, syntaxErr
if	Layout = GRIDLAYOUT then
	fxdw fxGridDW
	fxGridDW.RowIndicator = this.RowIndicator
	dwSyntax = fxGridDW.GetGridSyntax(TableAlias, TableName, ColumnGroupList, false)
else
	fxdw fxFormDW
	dwSyntax = fxFormDW.GetFormSyntax(TableAlias, TableName, ColumnGroupList)
end if

if	LibraryImport ("fxdws.pbd", "d_" + TableAlias + "_" + TableName + '-' + ColumnGroupList, ImportDataWindow!, dwSyntax, syntaxErr) = -1 then
	clipboard(dwSyntax)
end if
DataObject = "d_" + TableAlias + "_" + TableName + '-' + ColumnGroupList

//	Create new datawindow.
int createResult
createResult = this.Create(dwSyntax, syntaxErr)
if	createResult = 1 then
	post event fx_definitionchanged(DataObject)
else
	post event fx_definitionchanged("")
end if


return SUCCESS

end function

public subroutine setchange (long row, integer columnnumber);
if	row<= 0 or row > RowCount() or object.DataWindow.QueryMode = "yes" then return

//	Set the change column.
if	Describe("Change.ID") = "!" then return

string	change
change = object.Change[row]
if	change = "" then
	change = Space(1000)
end if
dwitemstatus itemStatus
itemStatus = GetItemStatus(row, columnNumber, Primary!)
if	itemStatus = NotModified! then
	change = mid(change, 1, columnNumber - 1) + "0" + mid(change, columnNumber + 1)
else
	change = mid(change, 1, columnNumber - 1) + "1" + mid(change, columnNumber + 1)
end if
object.Change[row] = change

end subroutine

public function integer selectrow (long row, boolean flag);

//	Set the change column.
if	Describe("IsSelected.ID") = "!" then return super::SelectRow(row, flag)

int	selected
if	flag then
	selected = 1
else
	selected = 0
end if

long	rows
rows = RowCount()
if	row > rows or rows = 0 then return -1
SetRedraw(false)
dwitemstatus rowStatus
if	row < 1 then
	int isSelected[]
	isSelected = object.IsSelected.Primary
	for row = 1 to rows
		if	isSelected[row] <> selected then
			rowStatus = GetItemStatus(row, 0, Primary!)
			object.IsSelected[row] = selected
			SetItemStatus(row, 0, Primary!, rowStatus)
		end if
	next
	SetRedraw(true)
else
	rowStatus = GetItemStatus(row, 0, Primary!)
	object.IsSelected[row] = selected
	SetItemStatus(row, 0, Primary!, rowStatus)
end if

return SUCCESS
end function

public function integer refresh ();
return event pfc_retrieve()

end function

public function integer setcolumncomments (boolean switchcolumncomments);
//	Check arguments
if	IsNull(switchColumnComments) then
	return FAILURE
end if

if	switchColumnComments then
	if	isnull(ColumnComments) or not IsValid(ColumnComments) then
		ColumnComments = create n_cst_columncomments
		
		window ownerWindow
		of_GetParentWindow(ref ownerWindow)
		
		return ColumnComments.SetRequestor(this, ownerWindow)
	end if
	return NO_ACTION
end if

if	IsValid(ColumnComments) then
	destroy PowerFilter
end if

return SUCCESS

end function

public subroutine setcolumncomment (long row, integer columnnumber);
if	row<= 0 or row > RowCount() or object.DataWindow.QueryMode = "yes" then return

//	Set the change column.
if	Describe("RowComments.ID") = "!" then return

string	rowComments
rowComments = object.RowComments[row]
if	rowComments = "" then
	rowComments = Space(254)
end if
rowComments = mid(rowComments, 1, columnNumber - 1) + "1" + mid(rowComments, columnNumber + 1)
object.RowCommments[row] = rowComments


end subroutine

public function integer showtooltip (string dwoname, integer xpos, integer ypos);
if	not Isvalid(ParentWO) then return FAILURE

if	dwoName =  PriorDWOName then
	if	IsValid(ToolTip) then
		if	not ToolTip.Visible then
			if	xpos > AnchorX + 40 or xpos < AnchorX - 40 or ypos > AnchorY + 40 or ypos < AnchorY - 40 then
				ToolTip.ToolTipTimer.Start(.05)
				ToolTip.Move(ParentWO.PointerX() + 20, ParentWO.PointerY() + 50)
				AnchorX = xpos
				AnchorY = ypos
			end if
		end if
	end if
	return SUCCESS //If we're still positioned on the same dwo, we don't need a new one so return.
end if

if	IsValid(ToolTip) then
	ParentWO.CloseUserObject(ToolTip)
end if
n_cst_associative_array toolTipParm

string tagDWO
tagDWO = Describe(dwoName + ".Tag")
if	tagDWO <> "!" and tagDWO <> "?" then
	toolTipParm.of_SetItem("RequestorWindow", ParentWO)
	toolTipParm.of_SetItem("ToolTipText", tagDWO)
	ParentWO.OpenUserObjectWithParm(ToolTip, toolTipParm, ParentWO.PointerX() + 20, ParentWO.PointerY() + 50)
	AnchorX = xpos
	AnchorY = ypos
end if

return SUCCESS

end function

public function integer showcolumncomments (string dwoname, long row);
if	not IsValid(ColumnComments) then return NO_ACTION
if	dwoName = PriorDWOName then return NO_ACTION

string dwoType
dwoType = Describe(dwoName + ".type")

ColumnComments.post ShowComment(dwoType, dwoName, row)

return NO_ACTION

end function

public function integer measuredw ();
long emptyArray[]

//	Set default values:
UnitXFactor = 0
UnitYFactor = 0
HeaderHeight = 0
DetailHeight = 0
SummaryHeight = 0
FooterHeight = 0
GroupHeaderHeights = emptyArray
GroupTrailerHeights = emptyArray
HeaderWidth = 0
DetailWidth = 0
SummaryWidth = 0
FooterWidth = 0
GroupHeaderWidth = emptyArray
GroupTrailerWidth = emptyArray
DWMaximumWidth = 0

//	Read datawindow units.
DWUnits = Describe ("DataWindow.Units")
/*
0 - PowerBuilder units
1 - Display pixels
2 - 1/1000 of a logical inch
3 - 1/1000 of a logical centimeter
*/

choose case DWUnits
	case "0"
		UnitXFactor = 1
		UnitYFactor = 1
	case "1"
		UnitXFactor = UnitsToPixels(1000, XUnitsToPixels!) / 1000.00
		UnitYFactor = UnitsToPixels(1000, YUnitsToPixels!) / 1000.00
	case "2"
		UnitXFactor = 2.264368
		UnitYFactor = 2.592105
	case "3"
		UnitXFactor = 5.770115
		UnitYFactor = 6.605263
	case else
		return FAILURE
end choose

//	Read heights of bands.
string groupHeaderParts[]
int groupHeaderI
string groupTrailerParts[]
int groupTrailerI

string bandList[]
bandList = SplitString(Describe ("DataWindow.Bands"), "~t")

int i
for	i = 1 to UpperBound(bandList)
	choose case true
		case lower(bandList[i]) = lower("Header")
			HeaderHeight = long(Describe("DataWindow." + bandList[i] + ".Height"))
		case lower(bandList[i]) = lower("Detail")
			DetailHeight = long(Describe("DataWindow." + bandList[i] + ".Height"))
		case lower(bandList[i]) = lower("Summary")
			SummaryHeight = long(Describe("DataWindow." + bandList[i] + ".Height"))
		case lower(bandList[i]) = lower("Footer")
			FooterHeight = long(Describe("DataWindow." + bandList[i] + ".Height"))
		case lower(left(bandList[i], len("Header"))) = lower("Header")
			groupHeaderParts = SplitString(bandList[i], ".")
			groupHeaderI = long(groupHeaderParts[2])
			GroupHeaderHeights[groupHeaderI] = long(Describe("DataWindow." + bandList[i] + ".Height"))
		case lower(left(bandList[i], len("Trailer"))) = lower("Trailer")
			groupTrailerParts = SplitString(bandList[i], ".")
			groupTrailerI = long(groupTrailerParts[2])
			GroupTrailerHeights[groupTrailerI] = long(Describe("DataWindow." + bandList[i] + ".Height"))
	end choose
next

//	Read the right edge of objects.
string objectList[]
objectList = SplitString(Describe ("DataWindow.Objects"), "~t")

GroupHeaderWidth = GroupHeaderHeights
for i = 1 to UpperBound(GroupHeaderWidth)
	GroupHeaderWidth[i] = 0
next
GroupTrailerWidth = GroupTrailerHeights
for i = 1 to UpperBound(GroupTrailerWidth)
	GroupTrailerWidth[i] = 0
next
DWMaximumWidth = 0

for	i = 1 to UpperBound(objectList)
	string objectBand
	objectBand = Describe("Datawindow." + objectList[i] + ".Band")
	
	long rightEdge
	rightEdge = long(Describe("DataWindow." + objectList[i] + ".X")) + long(Describe("DataWindow." + objectList[i] + ".Width"))
	if	DWMaximumWidth < rightEdge then DwMaximumWidth = rightEdge
	
	choose case true
		case lower(objectBand) = lower("Header")
			if	HeaderWidth < rightEdge then HeaderWidth = rightEdge
		case lower(objectBand) = lower("Detail")
			rightEdge = long(Describe("DataWindow." + objectList[i] + ".X")) + long(Describe("DataWindow." + objectList[i] + ".Width"))
			if	DetailWidth < rightEdge then DetailWidth = rightEdge
		case lower(objectBand) = lower("Summary")
			rightEdge = long(Describe("DataWindow." + objectList[i] + ".X")) + long(Describe("DataWindow." + objectList[i] + ".Width"))
			if	SummaryWidth < rightEdge then SummaryWidth = rightEdge
		case lower(objectBand) = lower("Footer")
			rightEdge = long(Describe("DataWindow." + objectList[i] + ".X")) + long(Describe("DataWindow." + objectList[i] + ".Width"))
			if	FooterWidth < rightEdge then FooterWidth = rightEdge
		case lower(left(objectBand, len("Header"))) = lower("Header")
			groupHeaderParts = SplitString(objectBand, ".")
			groupHeaderI = long(groupHeaderParts[2])
			if GroupHeaderWidth[groupHeaderI] < rightEdge then GroupHeaderWidth[groupHeaderI] = rightEdge
		case lower(left(objectBand, len("Trailer"))) = lower("Trailer")
			groupTrailerParts = SplitString(objectBand, ".")
			groupTrailerI = long(groupTrailerParts[2])
			if GroupTrailerWidth[groupTrailerI] < rightEdge then GroupTrailerWidth[groupTrailerI] = rightEdge
	end choose
next			

return SUCCESS

end function

public function long getsinglerowheight ();
long groupHeadersHeight =0, groupTrailersHeight = 0
int i
for i = 1 to upperBound(GroupHeaderHeights)
	groupHeadersHeight += GroupHeaderHeights[i]
next
for i = 1 to upperBound(GroupTrailerHeights)
	groupTrailersHeight += GroupTrailerHeights[i]
next

return HeaderHeight + DetailHeight + SummaryHeight + FooterHeight + groupHeadersHeight + groupTrailersHeight

end function

on u_fxdw.create
call super::create
end on

on u_fxdw.destroy
call super::destroy
end on

event constructor;call super::constructor;
//	Setup row selection.
choose case RowSelection
	case SINGLEROW
		of_SetRowSelect(true)
		inv_RowSelect.of_SetStyle(inv_RowSelect.SINGLE)
	case MULTIROW
		of_SetRowSelect(true)
		inv_RowSelect.of_SetStyle(inv_RowSelect.EXTENDED)
end choose

//	Conditionally turn on PowerFilter.
if	ShowPowerFilter then
	SetPowerFilter (true)
	PowerFilter.of_SetDW (this)
	PowerFilter.post Show()
end if

//	Conditionally turn on ColumnComments.
if	ShowColumncomments then
	SetColumnComments(true)
	ColumnComments.post Show()
end if

//	Conditionally generate DW.
if	AutoGenerateDW then
	GenerateDW()
end if

//	Default to drop down searching.
if	DropDownSearch then
	of_SetDropDownSearch(true)
	inv_DropDownSearch.of_Register()
end if

//	ToolTip Handling...
powerobject parentPO
parentPO = GetParent()
do while	IsValid(parentPO)
	choose case parentPO.TypeOf()
		case Window!, WindowObject!
			ParentWO = parentPO
			exit
	end choose
	parentPO = parentPO.GetParent()
loop

end event

event itemchanged;call super::itemchanged;
string columnID
columnID = Describe(dwo.name + ".id")
if	ColumnID <> "!" then
	post SetChange(row, integer(columnID))
end if

end event

event rowfocuschanged;call super::rowfocuschanged;
if IsValid( inv_rowselect ) then
	post SetRedraw(true)
end if

end event

event clicked;call super::clicked;
if IsValid( inv_rowselect ) then
	post SetRedraw(true)
end if

end event

event lbuttonup;call super::lbuttonup;
if IsValid( inv_rowselect ) then
	post SetRedraw(true)
end if

end event

event rbuttonup;call super::rbuttonup;
if IsValid( inv_rowselect ) then
	post SetRedraw(true)
end if

end event

event rbuttondown;call super::rbuttondown;
if IsValid( inv_rowselect ) then
	post SetRedraw(true)
end if

end event

event resize;call super::resize;
//	If autoscroll is enabled, make sure the current row is onscreen.
if	AutoScroll then
	if	RowCount() > 0 then
		int currentRow ; currentRow = GetRow()
		if	currentRow > 0 then
			string firstRowOnPage ; firstRowOnPage = Describe("DataWindow.FirstRowOnPage")
			string lastRowOnPage ; lastRowOnPage = Describe("DataWindow.LastRowOnPage")
			if	IsNumber(firstRowOnPage) and IsNumber(lastRowOnPage) then
				if	currentRow > Long(lastRowOnPage) or currentRow < Long(firstRowOnPage) then
					ScrollToRow (currentRow)
				end if
			end if
		end if
	end if
end if


end event

event retrieveend;call super::retrieveend;
//	Ensure that grid is visible after retrieval.
post SetRedraw(true)
end event

event dwlbuttonup;call super::dwlbuttonup;
if	IsValid(ColumnComments) then
	ColumnComments.event post ue_dwlbuttonup(dwo.Type, dwo.Name, row)
end if

if	IsValid(PowerFilter) then
	PowerFilter.event post ue_buttonclicked(dwo.Type, dwo.Name)
end if


end event

event itemfocuschanged;call super::itemfocuschanged;
if	IsValid(ColumnComments) then
	ColumnComments.event post ue_itemfocuschanged(dwo.Type, dwo.Name, row)
end if

end event

event selectionchanged;call super::selectionchanged;
//	Set the change column.
if	Describe("IsSelected.ID") = "!" then
	long row
	row = GetSelectedRow (0)
	if	row = 0 then
		NoneSelected = true
		SingleSelected = false
	else
		NoneSelected = false
		if	GetSelectedRow(row) > row then
			SingleSelected = false
		else
			SingleSelected = true
		end if
	end if
else
	int selectedCount = 0
	long isSelected[]
//	string lsIsSelected
//	lsIsSelected = Describe("IsSelected.Primary")
	isSelected = object.IsSelected.Primary
	long rowI, rows
	rows = UpperBound (isSelected)
	NoneSelected = true
	for	rowI = 1 to rows
		if	IsSelected[rowI] = 1 then
			selectedCount ++
			if	selectedCount > 1 then
				NoneSelected = false
				SingleSelected = false
				exit
			end if
			NoneSelected = false
			SingleSelected = true
		end if
	next
end if

end event

